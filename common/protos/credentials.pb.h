/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.2 at Fri May 22 12:17:51 2020. */

#ifndef PB_CREDENTIALS_PB_H_INCLUDED
#define PB_CREDENTIALS_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _ccParameters {
    pb_bytes_array_t *ccId;
    pb_bytes_array_t *ccVersion;
    int64_t *ccSequence;
    pb_bytes_array_t *channelId;
    pb_bytes_array_t *mspId;
    pb_bytes_array_t *tlccMREnclave;
/* @@protoc_insertion_point(struct:ccParameters) */
} ccParameters;

typedef struct _ccPrivateKeys {
    pb_bytes_array_t *enclaveSigningKey;
    pb_bytes_array_t *enclaveDecryptionKey;
/* @@protoc_insertion_point(struct:ccPrivateKeys) */
} ccPrivateKeys;

typedef struct _ccPublicKeys {
    pb_bytes_array_t *enclaveVerifyingKey;
    pb_bytes_array_t *enclaveEncryptionKey;
/* @@protoc_insertion_point(struct:ccPublicKeys) */
} ccPublicKeys;

typedef struct _credentials {
    pb_bytes_array_t *verb;
    pb_bytes_array_t *enclaveAttestation;
    pb_bytes_array_t *attestedData;
    pb_bytes_array_t *verificationReport;
/* @@protoc_insertion_point(struct:credentials) */
} credentials;

/* Default values for struct fields */

/* Initializer values for message structs */
#define ccParameters_init_default                {NULL, NULL, NULL, NULL, NULL, NULL}
#define ccPublicKeys_init_default                {NULL, NULL}
#define ccPrivateKeys_init_default               {NULL, NULL}
#define credentials_init_default                 {NULL, NULL, NULL, NULL}
#define ccParameters_init_zero                   {NULL, NULL, NULL, NULL, NULL, NULL}
#define ccPublicKeys_init_zero                   {NULL, NULL}
#define ccPrivateKeys_init_zero                  {NULL, NULL}
#define credentials_init_zero                    {NULL, NULL, NULL, NULL}

/* Field tags (for use in manual encoding/decoding) */
#define ccParameters_ccId_tag                    1
#define ccParameters_ccVersion_tag               2
#define ccParameters_ccSequence_tag              3
#define ccParameters_channelId_tag               4
#define ccParameters_mspId_tag                   5
#define ccParameters_tlccMREnclave_tag           6
#define ccPrivateKeys_enclaveSigningKey_tag      1
#define ccPrivateKeys_enclaveDecryptionKey_tag   2
#define ccPublicKeys_enclaveVerifyingKey_tag     1
#define ccPublicKeys_enclaveEncryptionKey_tag    2
#define credentials_verb_tag                     1
#define credentials_enclaveAttestation_tag       2
#define credentials_attestedData_tag             3
#define credentials_verificationReport_tag       4

/* Struct field encoding specification for nanopb */
extern const pb_field_t ccParameters_fields[7];
extern const pb_field_t ccPublicKeys_fields[3];
extern const pb_field_t ccPrivateKeys_fields[3];
extern const pb_field_t credentials_fields[5];

/* Maximum encoded size of messages (where known) */
/* ccParameters_size depends on runtime parameters */
/* ccPublicKeys_size depends on runtime parameters */
/* ccPrivateKeys_size depends on runtime parameters */
/* credentials_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define CREDENTIALS_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
