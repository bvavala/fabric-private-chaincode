/'
    Copyright 2020 Intel Corporation
    Copyright IBM Corp. All Rights Reserved.

    SPDX-License-Identifier: Apache-2.0
'/

@startuml

'- force wrapping of longer text
'skinparam wrapWidth 400

!pragma teoz true

'hide footbox
'title Foot Box removed

title FPC Enclave Registration \n ***** DOCUMENT IN PROGRESS ******

actor "Admin Org1" as Admin order 10
participant "ECC Peer1_Org1" as ECC1 order 20
participant "ECC_Enclave" as Enclave1 order 30 #99FF99
participant "ERCC Peer1_Org1" as ERCC1 order 40
participant "ERCC Peer1_Org2" as ERCC2 order 50

entity IAS order 1

ref over ERCC1, ERCC2
  It is assumed that: channel has already been created; ERCC has been installed.
  Also: ERCC contains hard-coded the TLCC_MRenclave and the IAS Root Certificate.
end ref

group enclave creation
  note over Admin #FFaa00
    **MST**: we might want to replace (here and elsewhere) CC_VER with the sequence
    number from chain code definition as versions can be re-used in downgrades yet we
    might or might not want to re-use enclaves?
  end note

  Admin -> ECC1 ++: invoke create(SPID)

  'ECC1 -> TLCC1 ++: getInfo
  'note over TLCC1
  '  This information could also be retrieved elsewhere if easier. At this point in time
  '  it does not have to be authenticated (and is anyway passed through untrusted ECC),
  '  consistency will be verified later in registration (Remember that TLCC_MR is defined
  '  and agreed by human consensus in the ERCC chaincode definition)
  'end note
  'return TLCC_MR, CH_id

  ECC1 -> Enclave1 ++: invoke create(SPID)

  Enclave1 -> ECC1 ++: get_signed_proposal
  return Signed_Proposal
  Enclave1 -> Enclave1 : CC_Id, CC_Version <- extract_cc_info(Signed_Proposal) 
  Enclave1 -> ECC1 ++: get_mspid
  return MSPID
  Enclave1 -> ECC1 ++: get_channel_id
  return Channel_Id
  group fpc-cc-tlcc binding (to be discussed)
  Enclave1 -> ERCC1 ++: get_tlcc_mrenclave()
  return TLCC_MREnclave
  end group

  Enclave1 -> Enclave1 : keyGen
  note left
    keyGen generates the keys stored in the key ring,
    and described in the Credential protobuf
  end note

  group Org-Enclave binding (to be discussed)
  Enclave1  -> ECC1 ++: binding (ECC_VK)
  ECC1 -> ECC1 : SIG_Org_1 <- create signature
  note left
    Org_1 takes "ownership" of this enclave
  end note
  return SIG_Org_1
  end group

  Enclave1 -> Enclave1 : generate quote
  note left
    quote is defined with reportbody =
    Hash(<CC_Id, CC_Version, MSPID, Enclave_VK, Enclave_EK, CC_EK, TLCC_MR, Channel_Id>)
  end note

  Enclave1 -> Enclave1 : populate protobuf
  note left
    attestation and (public) keys are inserted in
    the Credentials protobuf
  end note

  group Persistent Credentials (to be discussed)
  Enclave1 -> Enclave1 : seal state
  note left
    sealed state includes: ...
    CC_Id, CC_Version,
    MSPID, Channel_Id,
    Enclave_SK, Enclave_DK, CC_DK,
    TLCC_MR
  end note
  end group

  return Credentials protobuf

  return Credentials protobuf

  Admin -> IAS ++: send quote
  return Verification_Report
  Admin -> Admin: insert Verification_Report in Credentials


'  note over Admin1 #FFaa00
'    **MST**: From an attestation generalization perspective i think there should be just a single
'    call ""GetAttestationProof"" or alike rather than a separate place where you get quote
'    and another where you get the registration report which requires some re-organization of calls.
'    A few observations on this:
'    - we do not strictly have to call the enclave via ECC. ECCManager could also directly call
'      enclave.so. this would make this creation and key-management potentially easier?
'    - the quote generation is not driven from within the enclave as currently shown above but from
'      the outside!
'    I think from a high-level there should be following three high-level calls either in
'    ECC or ECCMAnager depending on above:
'    - EnclaveCreate (key-gen & imprint of context, i.e., current create/binding flows
'    - EnclaveProof: gets org endorsement-sig, creates report, then quote
'      and, if epid, gets IAS report. 
'    - EnclavePersist: returns sealed state (important for security that this is called only after
'      EnclaveProof [which we might want to enforce using some state-machine?] )
'  end note
'  return ATTESTATION

end

group enclave registration
  Admin -> ERCC1 ++: invoke register (Credentials)
  Admin -> ERCC2 : invoke register (Credentials)

  ref over ERCC2
    (same as ERCC1)
  end ref
  activate ERCC2

  ERCC1 -> ERCC1 : check verification report (through hard-coded certificate)
  ERCC1 -> ERCC1 : check TLCC_MREnclave match (through hard-coded id)
  ERCC1 -> ERCC1 : check Channel_Id match (through shim)
  ERCC1 -> ERCC1 : check Credentials.MSPID matches Admin.MSPID (though shim)

  group deployment validation (unclear, TBD)
    ERCC1 -> ERCC1 : validate FPC deployment (restriction) policy
    note left #FFaa00
      related risk management (v2.0 feature TBD)
    end note
  end group

  ERCC1 -> ERCC1 : putState(key=Credentials.CC_Id, value=Credentials)

  return register endorsement

  return register endorsement

  ref over Admin
    submit transaction
  end ref

end

@enduml
